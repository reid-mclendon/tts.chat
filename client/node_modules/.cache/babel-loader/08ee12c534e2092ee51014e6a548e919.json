{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\grumb\\\\Documents\\\\aloud\\\\client\\\\src\\\\components\\\\ChatInput.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport CircularSlider from '@fseehawer/react-circular-slider';\nimport socket from '../socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst darkGrey = '#303030';\nconst Input = styled.input`\nborder-radius: 5vw;\nfont-family: 'Monosten';\ncolor: #b7b7b7;\nbackground-color: #f2f3f5;\nborder: none;\nheight: 2vh;\nwidth: 50%;\npadding: 1em 2em 1em 2em;\noutline: none;\n&:focus {\n    color: ${darkGrey};\n}`;\n_c = Input;\nconst Dial = styled.div`\n`;\n_c2 = Dial;\n\nconst ChatInput = () => {\n  _s();\n\n  const [inputText, setInputText] = useState('Say something...');\n\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      socket.emit('msg', inputText);\n      setInputText('');\n    }\n  };\n\n  useEffect(() => {\n    socket.on('msg', msg => {\n      let utterance = new SpeechSynthesisUtterance(msg);\n      speechSynthesis.speak(utterance);\n      console.log(msg);\n    });\n    return () => {\n      socket.off('msg');\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      autoComplete: \"off\",\n      type: \"text\",\n      name: \"name\",\n      onFocus: () => setInputText(''),\n      onKeyPress: handleKeyPress,\n      onBlur: () => setInputText('Say something...'),\n      value: inputText,\n      onChange: e => setInputText(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Dial, {\n      children: /*#__PURE__*/_jsxDEV(CircularSlider, {\n        width: \"50\",\n        onChange: value => {}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 16\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ChatInput, \"3XewHyFAcDjS+kCgN3zjrhbqF/c=\");\n\n_c3 = ChatInput;\nexport default ChatInput;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Input\");\n$RefreshReg$(_c2, \"Dial\");\n$RefreshReg$(_c3, \"ChatInput\");","map":{"version":3,"sources":["C:/Users/grumb/Documents/aloud/client/src/components/ChatInput.jsx"],"names":["React","useState","useEffect","styled","CircularSlider","socket","darkGrey","Input","input","Dial","div","ChatInput","inputText","setInputText","handleKeyPress","e","key","emit","on","msg","utterance","SpeechSynthesisUtterance","speechSynthesis","speak","console","log","off","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,MAAP,MAAmB,WAAnB;;;AAGA,MAAMC,QAAQ,GAAG,SAAjB;AAEA,MAAMC,KAAK,GAAGJ,MAAM,CAACK,KAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAaF,QAAS;AACtB,EAZA;KAAMC,K;AAcN,MAAME,IAAI,GAAGN,MAAM,CAACO,GAAI;AACxB,CADA;MAAMD,I;;AAGN,MAAME,SAAS,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,kBAAD,CAA1C;;AACA,QAAMa,cAAc,GAAIC,CAAD,IAAO;AAC1B,QAAGA,CAAC,CAACC,GAAF,KAAU,OAAb,EAAqB;AACnBX,MAAAA,MAAM,CAACY,IAAP,CAAY,KAAZ,EAAmBL,SAAnB;AACAC,MAAAA,YAAY,CAAC,EAAD,CAAZ;AACD;AACJ,GALD;;AAOAX,EAAAA,SAAS,CAAC,MAAM;AACZG,IAAAA,MAAM,CAACa,EAAP,CAAU,KAAV,EAAiBC,GAAG,IAAI;AACpB,UAAIC,SAAS,GAAG,IAAIC,wBAAJ,CAA6BF,GAA7B,CAAhB;AACAG,MAAAA,eAAe,CAACC,KAAhB,CAAsBH,SAAtB;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ;AACH,KAJD;AAMA,WAAO,MAAM;AACTd,MAAAA,MAAM,CAACqB,GAAP,CAAW,KAAX;AACH,KAFD;AAGH,GAVQ,CAAT;AAYA,sBACA;AAAA,4BACI,QAAC,KAAD;AAAO,MAAA,YAAY,EAAC,KAApB;AAA0B,MAAA,IAAI,EAAC,MAA/B;AAAsC,MAAA,IAAI,EAAC,MAA3C;AAAkD,MAAA,OAAO,EAAE,MAAMb,YAAY,CAAC,EAAD,CAA7E;AAAmF,MAAA,UAAU,EAAEC,cAA/F;AACA,MAAA,MAAM,EAAE,MAAMD,YAAY,CAAC,kBAAD,CAD1B;AACgD,MAAA,KAAK,EAAED,SADvD;AACkE,MAAA,QAAQ,EAAEG,CAAC,IAAIF,YAAY,CAACE,CAAC,CAACY,MAAF,CAASC,KAAV;AAD7F;AAAA;AAAA;AAAA;AAAA,YADJ,eAGK,QAAC,IAAD;AAAA,6BAAM,QAAC,cAAD;AAAgB,QAAA,KAAK,EAAC,IAAtB;AACH,QAAA,QAAQ,EAAGA,KAAK,IAAI,CAAI;AADrB;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,YAHL;AAAA,kBADA;AAUH,CA/BD;;GAAMjB,S;;MAAAA,S;AAiCN,eAAeA,SAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport styled from '@emotion/styled';\r\nimport CircularSlider from '@fseehawer/react-circular-slider';\r\nimport socket from '../socket';\r\n\r\n\r\nconst darkGrey = '#303030';\r\n\r\nconst Input = styled.input`\r\nborder-radius: 5vw;\r\nfont-family: 'Monosten';\r\ncolor: #b7b7b7;\r\nbackground-color: #f2f3f5;\r\nborder: none;\r\nheight: 2vh;\r\nwidth: 50%;\r\npadding: 1em 2em 1em 2em;\r\noutline: none;\r\n&:focus {\r\n    color: ${darkGrey};\r\n}`\r\n\r\nconst Dial = styled.div`\r\n`\r\n\r\nconst ChatInput = () => {\r\n    const [inputText, setInputText] = useState('Say something...');\r\n    const handleKeyPress = (e) => {\r\n        if(e.key === 'Enter'){\r\n          socket.emit('msg', inputText);\r\n          setInputText('');\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        socket.on('msg', msg => {\r\n            let utterance = new SpeechSynthesisUtterance(msg);\r\n            speechSynthesis.speak(utterance);\r\n            console.log(msg);\r\n        });\r\n\r\n        return () => {\r\n            socket.off('msg');\r\n        };\r\n    });\r\n\r\n    return (\r\n    <>\r\n        <Input autoComplete=\"off\" type=\"text\" name=\"name\" onFocus={() => setInputText('')} onKeyPress={handleKeyPress} \r\n        onBlur={() => setInputText('Say something...')} value={inputText} onChange={e => setInputText(e.target.value)}/>\r\n         <Dial><CircularSlider width=\"50\"\r\n            onChange={ value => {  } }\r\n        /></Dial>\r\n         \r\n    </> \r\n    )\r\n}\r\n\r\nexport default ChatInput;"]},"metadata":{},"sourceType":"module"}