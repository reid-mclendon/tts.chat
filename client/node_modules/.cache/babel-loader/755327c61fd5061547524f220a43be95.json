{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\grumb\\\\Documents\\\\aloud\\\\client\\\\src\\\\components\\\\ChatInput.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport socket from '../socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst darkGrey = '#303030';\nconst Wrapper = styled.div`\ndisplay:flex;\njustify-content: center;\nalign-items: center;\nheight: 25vh;\ngrid-row: 2;\n`;\n_c = Wrapper;\nconst Wrapper2 = styled.div`\ndisplay:flex;\njustify-content: center;\nalign-items: center;\nheight: 25vh;\ngrid-row: 3;\n`;\n_c2 = Wrapper2;\nconst StyledInput = styled.input`\nborder-radius: 5vw;\nfont-family: 'Monosten';\ncolor: #b7b7b7;\nbackground-color: #f2f3f5;\nborder: none;\nheight: 2vh;\nwidth: 50%;\npadding: 1em 2em 1em 2em;\noutline: none;\n&:focus {\n    color: ${darkGrey};\n}`;\n_c3 = StyledInput;\nconst Slider = styled.input`\nwidth: 25%;\n`;\n_c4 = Slider;\n\nconst ChatInput = () => {\n  _s();\n\n  const [inputText, setInputText] = useState('Say something...');\n  const [pitch, setPitch] = useState(1);\n  const [rate, setRate] = useState(1);\n\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      let data = {\n        text: inputText,\n        pitch: pitch,\n        rate: rate\n      };\n      socket.emit('msg', data); // send server our message, the pitch, and the rate\n\n      setInputText('');\n    }\n  };\n\n  useEffect(() => {\n    socket.on('msg', data => {\n      // tell the client to speak a message with specified pitch and rate\n      let utterance = new SpeechSynthesisUtterance(data.text);\n      utterance.pitch = data.pitch;\n      utterance.rate = data.rate;\n      speechSynthesis.speak(utterance);\n      console.log(data.text);\n    });\n    return () => {\n      socket.off('msg');\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Wrapper, {\n      children: /*#__PURE__*/_jsxDEV(StyledInput, {\n        autoComplete: \"off\",\n        type: \"text\",\n        name: \"name\",\n        onFocus: () => setInputText(''),\n        onKeyPress: handleKeyPress,\n        onBlur: () => setInputText('Say something...'),\n        value: inputText,\n        onChange: e => setInputText(e.target.value),\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"1/16\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 120\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Wrapper2, {\n      children: [/*#__PURE__*/_jsxDEV(Slider, {\n        type: \"range\",\n        min: \"0\",\n        max: \"2\",\n        id: \"myRange\",\n        value: pitch,\n        onChange: e => setPitch(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        type: \"range\",\n        min: \"0\",\n        max: \"3\",\n        id: \"myRange\",\n        value: rate,\n        onChange: e => setRate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ChatInput, \"Cea0yA2bnfS4QNaFenN7rqmV/Ss=\");\n\n_c5 = ChatInput;\nexport default ChatInput;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"Wrapper2\");\n$RefreshReg$(_c3, \"StyledInput\");\n$RefreshReg$(_c4, \"Slider\");\n$RefreshReg$(_c5, \"ChatInput\");","map":{"version":3,"sources":["C:/Users/grumb/Documents/aloud/client/src/components/ChatInput.jsx"],"names":["React","useState","useEffect","styled","socket","darkGrey","Wrapper","div","Wrapper2","StyledInput","input","Slider","ChatInput","inputText","setInputText","pitch","setPitch","rate","setRate","handleKeyPress","e","key","data","text","emit","on","utterance","SpeechSynthesisUtterance","speechSynthesis","speak","console","log","off","target","value"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport styled from '@emotion/styled';\r\nimport socket from '../socket';\r\n\r\nconst darkGrey = '#303030';\r\n\r\nconst Wrapper = styled.div`\r\ndisplay:flex;\r\njustify-content: center;\r\nalign-items: center;\r\nheight: 25vh;\r\ngrid-row: 2;\r\n`\r\n\r\nconst Wrapper2 = styled.div`\r\ndisplay:flex;\r\njustify-content: center;\r\nalign-items: center;\r\nheight: 25vh;\r\ngrid-row: 3;\r\n`\r\n\r\nconst StyledInput = styled.input`\r\nborder-radius: 5vw;\r\nfont-family: 'Monosten';\r\ncolor: #b7b7b7;\r\nbackground-color: #f2f3f5;\r\nborder: none;\r\nheight: 2vh;\r\nwidth: 50%;\r\npadding: 1em 2em 1em 2em;\r\noutline: none;\r\n&:focus {\r\n    color: ${darkGrey};\r\n}`\r\n\r\nconst Slider = styled.input`\r\nwidth: 25%;\r\n`\r\n\r\nconst ChatInput = () => {\r\n    const [inputText, setInputText] = useState('Say something...');\r\n    const [pitch, setPitch] = useState(1);\r\n    const [rate, setRate] = useState(1);\r\n    const handleKeyPress = (e) => {\r\n        if(e.key === 'Enter'){\r\n          let data = {\r\n              text: inputText,\r\n              pitch: pitch,\r\n              rate: rate\r\n          }\r\n          socket.emit('msg', data); // send server our message, the pitch, and the rate\r\n          setInputText('');\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        socket.on('msg', data => { // tell the client to speak a message with specified pitch and rate\r\n            let utterance = new SpeechSynthesisUtterance(data.text);\r\n            utterance.pitch = data.pitch;\r\n            utterance.rate = data.rate;\r\n            speechSynthesis.speak(utterance);\r\n            console.log(data.text);\r\n        });\r\n\r\n        return () => {\r\n            socket.off('msg');\r\n        };\r\n    });\r\n\r\n    return (\r\n    <>\r\n    <Wrapper>\r\n        <StyledInput autoComplete=\"off\" type=\"text\" name=\"name\" onFocus={() => setInputText('')} onKeyPress={handleKeyPress} \r\n        onBlur={() => setInputText('Say something...')} value={inputText} onChange={e => setInputText(e.target.value)}><span>1/16</span></StyledInput>\r\n    </Wrapper> \r\n    <Wrapper2>\r\n        <Slider type=\"range\" min=\"0\" max=\"2\" id=\"myRange\" value={pitch} onChange={e => setPitch(e.target.value)}/>\r\n    <Slider type=\"range\" min=\"0\" max=\"3\" id=\"myRange\" value={rate} onChange={e => setRate(e.target.value)}/>\r\n    </Wrapper2>\r\n    </>\r\n    )\r\n}\r\n\r\nexport default ChatInput;"]},"metadata":{},"sourceType":"module"}