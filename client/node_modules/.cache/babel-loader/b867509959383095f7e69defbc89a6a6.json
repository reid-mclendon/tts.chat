{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport socket from '../adapters/socket';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet synth = window.speechSynthesis;\n\nconst Speaker = () => {\n  _s();\n\n  let voices = speechSynthesis.getVoices();\n  useEffect(() => {\n    socket.on('msg', data => {\n      // tell the client to speak a message with specified pitch and rate\n      let utterance = new SpeechSynthesisUtterance(data.text);\n      utterance.voice = voices[2];\n      synth.speak(utterance);\n      console.log(data.text);\n    });\n    return () => {\n      socket.off('msg');\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(Speaker, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Speaker;\nexport default Speaker;\n\nvar _c;\n\n$RefreshReg$(_c, \"Speaker\");","map":{"version":3,"sources":["C:/Users/grumb/Documents/aloud/client/src/components/Speaker.jsx"],"names":["React","useEffect","socket","synth","window","speechSynthesis","Speaker","voices","getVoices","on","data","utterance","SpeechSynthesisUtterance","text","voice","speak","console","log","off"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;;;AACA,IAAIC,KAAK,GAAGC,MAAM,CAACC,eAAnB;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAClB,MAAIC,MAAM,GAAGF,eAAe,CAACG,SAAhB,EAAb;AACIP,EAAAA,SAAS,CAAC,MAAM;AACRC,IAAAA,MAAM,CAACO,EAAP,CAAU,KAAV,EAAiBC,IAAI,IAAI;AAAE;AAC3B,UAAIC,SAAS,GAAG,IAAIC,wBAAJ,CAA6BF,IAAI,CAACG,IAAlC,CAAhB;AACAF,MAAAA,SAAS,CAACG,KAAV,GAAkBP,MAAM,CAAC,CAAD,CAAxB;AACAJ,MAAAA,KAAK,CAACY,KAAN,CAAYJ,SAAZ;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYP,IAAI,CAACG,IAAjB;AACH,KALG;AAMR,WAAO,MAAM;AACTX,MAAAA,MAAM,CAACgB,GAAP,CAAW,KAAX;AACH,KAFD;AAGH,GAVY,CAAT;AAYJ,sBAAQ,qCAAR;AACH,CAfD;;GAAMZ,O;;KAAAA,O;AAiBN,eAAeA,OAAf","sourcesContent":["import React, {useEffect} from 'react';\r\nimport socket from '../adapters/socket';\r\nlet synth = window.speechSynthesis;\r\n\r\nconst Speaker = () => {\r\n    let voices = speechSynthesis.getVoices();\r\n        useEffect(() => {\r\n                socket.on('msg', data => { // tell the client to speak a message with specified pitch and rate\r\n                let utterance = new SpeechSynthesisUtterance(data.text);\r\n                utterance.voice = voices[2];\r\n                synth.speak(utterance);\r\n                console.log(data.text);   \r\n            });\r\n        return () => {\r\n            socket.off('msg');\r\n        };\r\n    });\r\n\r\n    return (<></>);\r\n}\r\n\r\nexport default Speaker;"]},"metadata":{},"sourceType":"module"}