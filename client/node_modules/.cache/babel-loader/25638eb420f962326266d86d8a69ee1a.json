{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\grumb\\\\Documents\\\\aloud\\\\client\\\\src\\\\components\\\\ChatInput.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Speaker from './Speaker';\nimport styled from '@emotion/styled';\nimport socket from '../adapters/socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\ndisplay:flex;\njustify-content: center;\nalign-items: center;\nheight: 25vh;\ngrid-row: 2;\n`;\n_c = Wrapper;\nconst Wrapper2 = styled.div`\ndisplay:flex;\njustify-content: center;\nalign-items: center;\nheight: 25vh;\ngrid-row: 3;\n`;\nconst StyledInput = styled.input`\nborder-radius: 100em;\nbox-sizing: border-box;\nfont-family: 'Monosten';\ncolor: #b7b7b7;\nbackground-color: #f2f3f5;\nborder: none;\nheight: 2vh;\nwidth: 75%;\npadding: 1.5em 2em 1.5em 2em;\noutline: none;\n&:focus {\n    color: #303030;\n}\n@media (min-width: 1024px) {\n   width: 50%;\n}\n`;\n_c2 = StyledInput;\nconst Slider = styled.input`\nwidth: 25%;\n`;\n\nconst ChatInput = synth => {\n  _s();\n\n  // So in stupid stupid Chrome, speechSynthesis can not speak unless at some point the user activates it.\n  // This means that clients can not speak unless a message has been sent to them by someone else first.\n  const [inputText, setInputText] = useState('Say something...');\n  const [pitch, setPitch] = useState(1);\n  const [rate, setRate] = useState(1);\n\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      let data = {\n        text: inputText,\n        pitch: pitch,\n        rate: rate\n      };\n      socket.emit('msg', data); // send server our message, the pitch, and the rate\n\n      setInputText('');\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    let data = {\n      text: inputText,\n      pitch: pitch,\n      rate: rate\n    };\n    socket.emit('msg', data); // send server our message, the pitch, and the rate\n\n    setInputText('');\n  };\n\n  useEffect(() => {\n    socket.on('tts', data => {\n      // tell the client to speak a message with specified pitch and rate\n      synth.cancel();\n      let utterance = new SpeechSynthesisUtterance(data.text);\n      synth.speak(utterance);\n      console.log(data.text);\n    });\n    return () => {\n      socket.off('tts');\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Wrapper, {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(StyledInput, {\n          autoFocus: true,\n          maxLength: \"32\",\n          autoComplete: \"off\",\n          type: \"text\",\n          name: \"name\",\n          onFocus: () => {\n            setInputText('');\n          },\n          value: inputText,\n          onChange: e => setInputText(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\n_s(ChatInput, \"Cea0yA2bnfS4QNaFenN7rqmV/Ss=\");\n\n_c3 = ChatInput;\nexport default ChatInput;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"StyledInput\");\n$RefreshReg$(_c3, \"ChatInput\");","map":{"version":3,"sources":["C:/Users/grumb/Documents/aloud/client/src/components/ChatInput.jsx"],"names":["React","useState","useEffect","Speaker","styled","socket","Wrapper","div","Wrapper2","StyledInput","input","Slider","ChatInput","synth","inputText","setInputText","pitch","setPitch","rate","setRate","handleKeyPress","e","key","data","text","emit","handleSubmit","preventDefault","on","cancel","utterance","SpeechSynthesisUtterance","speak","console","log","off","target","value"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport Speaker from './Speaker';\r\nimport styled from '@emotion/styled';\r\nimport socket from '../adapters/socket';\r\n\r\nconst Wrapper = styled.div`\r\ndisplay:flex;\r\njustify-content: center;\r\nalign-items: center;\r\nheight: 25vh;\r\ngrid-row: 2;\r\n`\r\n\r\nconst Wrapper2 = styled.div`\r\ndisplay:flex;\r\njustify-content: center;\r\nalign-items: center;\r\nheight: 25vh;\r\ngrid-row: 3;\r\n`\r\n\r\nconst StyledInput = styled.input`\r\nborder-radius: 100em;\r\nbox-sizing: border-box;\r\nfont-family: 'Monosten';\r\ncolor: #b7b7b7;\r\nbackground-color: #f2f3f5;\r\nborder: none;\r\nheight: 2vh;\r\nwidth: 75%;\r\npadding: 1.5em 2em 1.5em 2em;\r\noutline: none;\r\n&:focus {\r\n    color: #303030;\r\n}\r\n@media (min-width: 1024px) {\r\n   width: 50%;\r\n}\r\n`\r\n\r\nconst Slider = styled.input`\r\nwidth: 25%;\r\n`\r\n\r\nconst ChatInput = (synth) => {\r\n\r\n    // So in stupid stupid Chrome, speechSynthesis can not speak unless at some point the user activates it.\r\n    // This means that clients can not speak unless a message has been sent to them by someone else first.\r\n    \r\n    const [inputText, setInputText] = useState('Say something...');\r\n    const [pitch, setPitch] = useState(1);\r\n    const [rate, setRate] = useState(1);\r\n    const handleKeyPress = (e) => {\r\n        if(e.key === 'Enter'){\r\n          let data = {\r\n              text: inputText,\r\n              pitch: pitch,\r\n              rate: rate\r\n          }\r\n          socket.emit('msg', data); // send server our message, the pitch, and the rate\r\n          setInputText('');\r\n        }\r\n    }\r\n    \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        let data = {\r\n            text: inputText,\r\n            pitch: pitch,\r\n            rate: rate\r\n        }\r\n        socket.emit('msg', data); // send server our message, the pitch, and the rate\r\n        setInputText('');\r\n    }\r\n\r\n    useEffect(() => {\r\n            socket.on('tts', data => { // tell the client to speak a message with specified pitch and rate\r\n                synth.cancel();\r\n                let utterance = new SpeechSynthesisUtterance(data.text);\r\n                synth.speak(utterance);\r\n\r\n                console.log(data.text);   \r\n        });\r\n            return () => {\r\n                socket.off('tts');\r\n            };\r\n    });\r\n\r\n    return (\r\n    <>\r\n    <Wrapper>\r\n    <form onSubmit={handleSubmit}>\r\n        <StyledInput autoFocus={true} maxLength=\"32\" autoComplete=\"off\"  type=\"text\" name=\"name\" onFocus={() => {setInputText(''); }} \r\n        value={inputText} onChange={(e) => setInputText(e.target.value)}>\r\n        </StyledInput>\r\n        <input type=\"submit\" value=\"Submit\"/>\r\n    </form>\r\n    </Wrapper> \r\n    </>\r\n    )\r\n}\r\n\r\nexport default ChatInput;"]},"metadata":{},"sourceType":"module"}