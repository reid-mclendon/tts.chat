{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\grumb\\\\Documents\\\\aloud\\\\client\\\\src\\\\components\\\\ChatInput.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Input from './Input';\nimport styled from '@emotion/styled';\nimport socket from '../socket';\nimport useKey from '../hooks/useKey';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst darkGrey = '#303030';\nconst StyledInput = styled.input`\nborder-radius: 5vw;\nfont-family: 'Monosten';\ncolor: #b7b7b7;\nbackground-color: #f2f3f5;\nborder: none;\nheight: 2vh;\nwidth: 50%;\npadding: 1em 2em 1em 2em;\noutline: none;\n&:focus {\n    color: ${darkGrey};\n}`;\n_c = StyledInput;\nconst Wrapper = styled.div`\ndisplay:flex;\njustify-content: center;\nalign-items: center;\nheight: 25vh;\ngrid-row: 2;\n`;\n_c2 = Wrapper;\nconst Wrapper2 = styled.div`\ndisplay:flex;\njustify-content: center;\nalign-items: center;\nheight: 25vh;\ngrid-row: 3;\n`;\n_c3 = Wrapper2;\nconst Slider = styled.input`\nwidth: 25%;\n`;\n_c4 = Slider;\n\nconst ChatInput = () => {\n  _s();\n\n  const [inputText, setInputText] = useState('Say something...');\n  const [pitch, setPitch] = useState(1);\n  const [rate, setRate] = useState(1);\n  useKey('Enter', () => {\n    let data = {\n      text: inputText,\n      pitch: pitch,\n      rate: rate\n    };\n    socket.emit('msg', data); // send server our message, the pitch, and the rate\n\n    setInputText('');\n  });\n  useEffect(() => {\n    socket.on('msg', data => {\n      // tell the client to speak a message with specified pitch and rate\n      let utterance = new SpeechSynthesisUtterance(data.text);\n      utterance.pitch = data.pitch;\n      utterance.rate = data.rate;\n      speechSynthesis.speak(utterance);\n      console.log(data.text);\n    });\n    return () => {\n      socket.off('msg');\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Wrapper, {\n      children: /*#__PURE__*/_jsxDEV(StyledInput, {\n        autoComplete: \"off\",\n        type: \"text\",\n        onFocus: () => setInputText(''),\n        onBlur: () => setInputText('Say something...'),\n        value: inputText,\n        onChange: e => setInputText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Wrapper2, {\n      children: [/*#__PURE__*/_jsxDEV(Slider, {\n        type: \"range\",\n        min: \"0\",\n        max: \"2\",\n        id: \"myRange\",\n        value: pitch,\n        onChange: e => setPitch(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        type: \"range\",\n        min: \"0\",\n        max: \"3\",\n        id: \"myRange\",\n        value: rate,\n        onChange: e => setRate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ChatInput, \"Gftd06zV5A4UcoH432UuHJLMI9Y=\", false, function () {\n  return [useKey];\n});\n\n_c5 = ChatInput;\nexport default ChatInput;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"StyledInput\");\n$RefreshReg$(_c2, \"Wrapper\");\n$RefreshReg$(_c3, \"Wrapper2\");\n$RefreshReg$(_c4, \"Slider\");\n$RefreshReg$(_c5, \"ChatInput\");","map":{"version":3,"sources":["C:/Users/grumb/Documents/aloud/client/src/components/ChatInput.jsx"],"names":["React","useState","useEffect","Input","styled","socket","useKey","darkGrey","StyledInput","input","Wrapper","div","Wrapper2","Slider","ChatInput","inputText","setInputText","pitch","setPitch","rate","setRate","data","text","emit","on","utterance","SpeechSynthesisUtterance","speechSynthesis","speak","console","log","off","e","target","value"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport Input from './Input';\r\nimport styled from '@emotion/styled';\r\nimport socket from '../socket';\r\nimport useKey from '../hooks/useKey';\r\n\r\nconst darkGrey = '#303030';\r\n\r\nconst StyledInput = styled.input`\r\nborder-radius: 5vw;\r\nfont-family: 'Monosten';\r\ncolor: #b7b7b7;\r\nbackground-color: #f2f3f5;\r\nborder: none;\r\nheight: 2vh;\r\nwidth: 50%;\r\npadding: 1em 2em 1em 2em;\r\noutline: none;\r\n&:focus {\r\n    color: ${darkGrey};\r\n}`\r\n\r\n\r\nconst Wrapper = styled.div`\r\ndisplay:flex;\r\njustify-content: center;\r\nalign-items: center;\r\nheight: 25vh;\r\ngrid-row: 2;\r\n`\r\n\r\nconst Wrapper2 = styled.div`\r\ndisplay:flex;\r\njustify-content: center;\r\nalign-items: center;\r\nheight: 25vh;\r\ngrid-row: 3;\r\n`\r\nconst Slider = styled.input`\r\nwidth: 25%;\r\n`\r\n\r\nconst ChatInput = () => {\r\n    const [inputText, setInputText] = useState('Say something...');\r\n    const [pitch, setPitch] = useState(1);\r\n    const [rate, setRate] = useState(1);\r\n\r\n    useKey('Enter', () => {\r\n        let data = {\r\n            text: inputText,\r\n            pitch: pitch,\r\n            rate: rate\r\n        }\r\n        socket.emit('msg', data); // send server our message, the pitch, and the rate\r\n        setInputText('');\r\n      });\r\n\r\n    useEffect(() => {\r\n        socket.on('msg', data => { // tell the client to speak a message with specified pitch and rate\r\n            let utterance = new SpeechSynthesisUtterance(data.text);\r\n            utterance.pitch = data.pitch;\r\n            utterance.rate = data.rate;\r\n            speechSynthesis.speak(utterance);\r\n            console.log(data.text);\r\n        });\r\n\r\n        return () => {\r\n            socket.off('msg');\r\n        };\r\n    });\r\n\r\n    return (\r\n    <>\r\n    <Wrapper>\r\n        <StyledInput autoComplete=\"off\" type=\"text\" onFocus={() => setInputText('')} \r\n    onBlur={() => setInputText('Say something...')} value={inputText} onChange={e => setInputText(e.target.value)} />\r\n    </Wrapper> \r\n    <Wrapper2>\r\n        <Slider type=\"range\" min=\"0\" max=\"2\" id=\"myRange\" value={pitch} onChange={e => setPitch(e.target.value)}/>\r\n    <Slider type=\"range\" min=\"0\" max=\"3\" id=\"myRange\" value={rate} onChange={e => setRate(e.target.value)}/>\r\n    </Wrapper2>\r\n    </>\r\n    )\r\n}\r\n\r\nexport default ChatInput;"]},"metadata":{},"sourceType":"module"}