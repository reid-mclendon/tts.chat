{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\grumb\\\\Documents\\\\aloud\\\\client\\\\src\\\\components\\\\ChatInput.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport socket from '../socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst darkGrey = '#303030';\nconst Input = styled.input`\nborder-radius: 5vw;\nfont-family: 'Monosten';\ncolor: #b7b7b7;\nbackground-color: #f2f3f5;\nborder: none;\nheight: 2vh;\nwidth: 75%;\npadding: 1em 2em 1em 2em;\noutline: none;\n&:focus {\n    color: ${darkGrey};\n}`;\n_c = Input;\n\nconst ChatInput = () => {\n  _s();\n\n  const [inputText, setInputText] = useState('Say something...');\n\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      socket.emit('msg', inputText);\n      setInputText('');\n    }\n  };\n\n  let voices = speechSynthesis.getVoices();\n  let utterance;\n  useEffect(() => {\n    socket.on('msg', msg => {\n      utterance = new SpeechSynthesisUtterance(msg);\n      utterance.voice = voices[3];\n      speechSynthesis.speak(utterance);\n      console.log(msg);\n      speechSynthesis.getVoices().forEach(voice => {\n        console.log(voice.name, voice.lang);\n      });\n    });\n    return () => {\n      socket.off('msg');\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Input, {\n      autoComplete: \"off\",\n      type: \"text\",\n      name: \"name\",\n      onFocus: () => setInputText(''),\n      onKeyPress: handleKeyPress,\n      onBlur: () => setInputText('Say something...'),\n      value: inputText,\n      onChange: e => setInputText(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(ChatInput, \"3XewHyFAcDjS+kCgN3zjrhbqF/c=\");\n\n_c2 = ChatInput;\nexport default ChatInput;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Input\");\n$RefreshReg$(_c2, \"ChatInput\");","map":{"version":3,"sources":["C:/Users/grumb/Documents/aloud/client/src/components/ChatInput.jsx"],"names":["React","useState","useEffect","styled","socket","darkGrey","Input","input","ChatInput","inputText","setInputText","handleKeyPress","e","key","emit","voices","speechSynthesis","getVoices","utterance","on","msg","SpeechSynthesisUtterance","voice","speak","console","log","forEach","name","lang","off","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,MAAP,MAAmB,WAAnB;;;AAEA,MAAMC,QAAQ,GAAG,SAAjB;AAEA,MAAMC,KAAK,GAAGH,MAAM,CAACI,KAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAaF,QAAS;AACtB,EAZA;KAAMC,K;;AAcN,MAAME,SAAS,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,kBAAD,CAA1C;;AACA,QAAMU,cAAc,GAAIC,CAAD,IAAO;AAC1B,QAAGA,CAAC,CAACC,GAAF,KAAU,OAAb,EAAqB;AACnBT,MAAAA,MAAM,CAACU,IAAP,CAAY,KAAZ,EAAmBL,SAAnB;AACAC,MAAAA,YAAY,CAAC,EAAD,CAAZ;AACD;AACJ,GALD;;AAMA,MAAIK,MAAM,GAAGC,eAAe,CAACC,SAAhB,EAAb;AACA,MAAIC,SAAJ;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACZE,IAAAA,MAAM,CAACe,EAAP,CAAU,KAAV,EAAiBC,GAAG,IAAI;AACpBF,MAAAA,SAAS,GAAG,IAAIG,wBAAJ,CAA6BD,GAA7B,CAAZ;AACAF,MAAAA,SAAS,CAACI,KAAV,GAAkBP,MAAM,CAAC,CAAD,CAAxB;AACAC,MAAAA,eAAe,CAACO,KAAhB,CAAsBL,SAAtB;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ;AACAJ,MAAAA,eAAe,CAACC,SAAhB,GAA4BS,OAA5B,CAAqCJ,KAAD,IAAW;AAC3CE,QAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACK,IAAlB,EAAwBL,KAAK,CAACM,IAA9B;AACD,OAFH;AAGH,KARD;AAUA,WAAO,MAAM;AACTxB,MAAAA,MAAM,CAACyB,GAAP,CAAW,KAAX;AACH,KAFD;AAGH,GAdQ,CAAT;AAgBA,sBACA;AAAA,2BACI,QAAC,KAAD;AAAO,MAAA,YAAY,EAAC,KAApB;AAA0B,MAAA,IAAI,EAAC,MAA/B;AAAsC,MAAA,IAAI,EAAC,MAA3C;AAAkD,MAAA,OAAO,EAAE,MAAMnB,YAAY,CAAC,EAAD,CAA7E;AAAmF,MAAA,UAAU,EAAEC,cAA/F;AACA,MAAA,MAAM,EAAE,MAAMD,YAAY,CAAC,kBAAD,CAD1B;AACgD,MAAA,KAAK,EAAED,SADvD;AACkE,MAAA,QAAQ,EAAEG,CAAC,IAAIF,YAAY,CAACE,CAAC,CAACkB,MAAF,CAASC,KAAV;AAD7F;AAAA;AAAA;AAAA;AAAA;AADJ,mBADA;AAMH,CAjCD;;GAAMvB,S;;MAAAA,S;AAmCN,eAAeA,SAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport styled from '@emotion/styled';\r\nimport socket from '../socket';\r\n\r\nconst darkGrey = '#303030';\r\n\r\nconst Input = styled.input`\r\nborder-radius: 5vw;\r\nfont-family: 'Monosten';\r\ncolor: #b7b7b7;\r\nbackground-color: #f2f3f5;\r\nborder: none;\r\nheight: 2vh;\r\nwidth: 75%;\r\npadding: 1em 2em 1em 2em;\r\noutline: none;\r\n&:focus {\r\n    color: ${darkGrey};\r\n}`\r\n\r\nconst ChatInput = () => {\r\n    const [inputText, setInputText] = useState('Say something...');\r\n    const handleKeyPress = (e) => {\r\n        if(e.key === 'Enter'){\r\n          socket.emit('msg', inputText);\r\n          setInputText('');\r\n        }\r\n    }\r\n    let voices = speechSynthesis.getVoices();\r\n    let utterance;\r\n\r\n    useEffect(() => {\r\n        socket.on('msg', msg => {\r\n            utterance = new SpeechSynthesisUtterance(msg);\r\n            utterance.voice = voices[3];\r\n            speechSynthesis.speak(utterance);\r\n            console.log(msg);\r\n            speechSynthesis.getVoices().forEach((voice) => {\r\n                console.log(voice.name, voice.lang)\r\n              })\r\n        });\r\n\r\n        return () => {\r\n            socket.off('msg');\r\n        };\r\n    });\r\n\r\n    return (\r\n    <>\r\n        <Input autoComplete=\"off\" type=\"text\" name=\"name\" onFocus={() => setInputText('')} onKeyPress={handleKeyPress} \r\n        onBlur={() => setInputText('Say something...')} value={inputText} onChange={e => setInputText(e.target.value)}/>\r\n    </> \r\n    )\r\n}\r\n\r\nexport default ChatInput;"]},"metadata":{},"sourceType":"module"}