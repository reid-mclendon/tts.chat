{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\grumb\\\\Documents\\\\aloud\\\\client\\\\src\\\\components\\\\ChatInput.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport socket from '../socket';\nimport textToSpeech from '@google-cloud/text-to-speech';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst darkGrey = '#303030';\nconst Wrapper = styled.div`\ndisplay:flex;\njustify-content: center;\nalign-items: center;\nheight: 25vh;\ngrid-row: 2;\n`;\n_c = Wrapper;\nconst CharCount = styled.div`\ndisplay: flex;\nfont-family: 'Monosten';\nfont-size: .8em;\nposition: absolute;\nmargin-left: 50%;\njustify-content: flex-end;\nalign-items: center;\nz-index: 99;\nwidth: .5em;\nheight: .5em;\n`;\n_c2 = CharCount;\nconst Wrapper2 = styled.div`\ndisplay:flex;\njustify-content: center;\nalign-items: center;\nheight: 25vh;\ngrid-row: 3;\n`;\nconst StyledInput = styled.input`\nborder-radius: 5vw;\nfont-family: 'Monosten';\ncolor: #b7b7b7;\nbackground-color: #f2f3f5;\nborder: none;\nheight: 2vh;\nwidth: 50%;\npadding: 1em 2em 1em 2em;\noutline: none;\n&:focus {\n    color: ${darkGrey};\n}`;\n_c3 = StyledInput;\nconst Slider = styled.input`\nwidth: 25%;\n`;\n\nconst ChatInput = () => {\n  _s();\n\n  const [inputText, setInputText] = useState('Say something...');\n  const [charCount, setCharCount] = useState(0);\n  const [pitch, setPitch] = useState(1);\n  const [rate, setRate] = useState(1);\n\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      let data = {\n        text: inputText,\n        pitch: pitch,\n        rate: rate\n      };\n      socket.emit('msg', data); // send server our message, the pitch, and the rate\n\n      setInputText('');\n    }\n\n    if (charCount >= 16 && e.key === 'Backspace') {}\n  };\n\n  const handleChange = e => {\n    if (charCount <= 16) {\n      setInputText(e.target.value);\n      setCharCount(inputText.length);\n    }\n  };\n\n  const handlePaste = e => {\n    e.preventDefault();\n  };\n\n  const handleBlur = e => {\n    setInputText('Say something...');\n    setCharCount(0);\n  };\n\n  useEffect(() => {\n    socket.on('msg', data => {\n      // tell the client to speak a message with specified pitch and rate\n      let utterance = new SpeechSynthesisUtterance(data.text);\n      utterance.pitch = data.pitch;\n      utterance.rate = data.rate;\n      speechSynthesis.speak(utterance);\n      console.log(data.text);\n    });\n    return () => {\n      socket.off('msg');\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Wrapper, {\n      children: [/*#__PURE__*/_jsxDEV(StyledInput, {\n        autoComplete: \"off\",\n        onPaste: () => handlePaste,\n        type: \"text\",\n        name: \"name\",\n        onFocus: () => setInputText(''),\n        onKeyPress: handleKeyPress,\n        onBlur: () => handleBlur,\n        value: inputText,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), charCount > 0 ? /*#__PURE__*/_jsxDEV(CharCount, {\n        children: [charCount, \"/16\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 26\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\n_s(ChatInput, \"1TfbSQpV9Dxiw2Tulv1RCHHdEno=\");\n\n_c4 = ChatInput;\nexport default ChatInput;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"CharCount\");\n$RefreshReg$(_c3, \"StyledInput\");\n$RefreshReg$(_c4, \"ChatInput\");","map":{"version":3,"sources":["C:/Users/grumb/Documents/aloud/client/src/components/ChatInput.jsx"],"names":["React","useState","useEffect","styled","socket","textToSpeech","darkGrey","Wrapper","div","CharCount","Wrapper2","StyledInput","input","Slider","ChatInput","inputText","setInputText","charCount","setCharCount","pitch","setPitch","rate","setRate","handleKeyPress","e","key","data","text","emit","handleChange","target","value","length","handlePaste","preventDefault","handleBlur","on","utterance","SpeechSynthesisUtterance","speechSynthesis","speak","console","log","off"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport styled from '@emotion/styled';\r\nimport socket from '../socket';\r\nimport textToSpeech from '@google-cloud/text-to-speech';\r\n\r\nconst darkGrey = '#303030';\r\n\r\nconst Wrapper = styled.div`\r\ndisplay:flex;\r\njustify-content: center;\r\nalign-items: center;\r\nheight: 25vh;\r\ngrid-row: 2;\r\n`\r\n\r\nconst CharCount = styled.div`\r\ndisplay: flex;\r\nfont-family: 'Monosten';\r\nfont-size: .8em;\r\nposition: absolute;\r\nmargin-left: 50%;\r\njustify-content: flex-end;\r\nalign-items: center;\r\nz-index: 99;\r\nwidth: .5em;\r\nheight: .5em;\r\n`\r\n\r\nconst Wrapper2 = styled.div`\r\ndisplay:flex;\r\njustify-content: center;\r\nalign-items: center;\r\nheight: 25vh;\r\ngrid-row: 3;\r\n`\r\n\r\nconst StyledInput = styled.input`\r\nborder-radius: 5vw;\r\nfont-family: 'Monosten';\r\ncolor: #b7b7b7;\r\nbackground-color: #f2f3f5;\r\nborder: none;\r\nheight: 2vh;\r\nwidth: 50%;\r\npadding: 1em 2em 1em 2em;\r\noutline: none;\r\n&:focus {\r\n    color: ${darkGrey};\r\n}`\r\n\r\nconst Slider = styled.input`\r\nwidth: 25%;\r\n`\r\n\r\nconst ChatInput = () => {\r\n    const [inputText, setInputText] = useState('Say something...');\r\n    const [charCount, setCharCount] = useState(0);\r\n    const [pitch, setPitch] = useState(1);\r\n    const [rate, setRate] = useState(1);\r\n    const handleKeyPress = (e) => {\r\n        if(e.key === 'Enter'){\r\n          let data = {\r\n              text: inputText,\r\n              pitch: pitch,\r\n              rate: rate\r\n          }\r\n          socket.emit('msg', data); // send server our message, the pitch, and the rate\r\n          setInputText('');\r\n        }\r\n        if (charCount >= 16 && e.key === 'Backspace')\r\n        {\r\n        }\r\n    }\r\n    const handleChange = (e) => {\r\n         if (charCount <= 16) {\r\n            setInputText(e.target.value);\r\n            setCharCount(inputText.length);\r\n         }\r\n\r\n    }\r\n    const handlePaste = (e) => {\r\n        e.preventDefault();\r\n    }\r\n\r\n    const handleBlur = (e) => {\r\n        setInputText('Say something...');\r\n        setCharCount(0);\r\n    }\r\n\r\n    useEffect(() => {\r\n        socket.on('msg', data => { // tell the client to speak a message with specified pitch and rate\r\n            let utterance = new SpeechSynthesisUtterance(data.text);\r\n            utterance.pitch = data.pitch;\r\n            utterance.rate = data.rate;\r\n            speechSynthesis.speak(utterance);\r\n            console.log(data.text);\r\n        });\r\n\r\n        return () => {\r\n            socket.off('msg');\r\n        };\r\n    });\r\n\r\n    return (\r\n    <>\r\n    <Wrapper>\r\n        <StyledInput autoComplete=\"off\" onPaste={() => handlePaste} type=\"text\" name=\"name\" onFocus={() => setInputText('')} onKeyPress={handleKeyPress} \r\n        onBlur={() => handleBlur} value={inputText} onChange={handleChange}>\r\n        </StyledInput>\r\n        {charCount > 0 ? <CharCount>{charCount}/16</CharCount> : <></>}\r\n    </Wrapper> \r\n    {/*\r\n    \r\n    <Wrapper2>\r\n        <Slider type=\"range\" min=\"0\" max=\"2\" id=\"myRange\" value={pitch} onChange={e => setPitch(e.target.value)}/>\r\n    <Slider type=\"range\" min=\"0\" max=\"3\" id=\"myRange\" value={rate} onChange={e => setRate(e.target.value)}/>\r\n    </Wrapper2>\r\n    */}\r\n    </>\r\n    )\r\n}\r\n\r\nexport default ChatInput;"]},"metadata":{},"sourceType":"module"}