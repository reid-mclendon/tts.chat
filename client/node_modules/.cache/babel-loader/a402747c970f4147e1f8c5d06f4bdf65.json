{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\grumb\\\\Documents\\\\aloud\\\\client\\\\src\\\\components\\\\ChatInput.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport socket from '../socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst darkGrey = '#303030';\nconst Input = styled.input`\nborder-radius: 5vw;\nfont-family: 'Monosten';\ncolor: #b7b7b7;\nbackground-color: #f2f3f5;\nborder: none;\nheight: 2vh;\nwidth: 50%;\npadding: 1em 2em 1em 2em;\noutline: none;\n&:focus {\n    color: ${darkGrey};\n}`;\n_c = Input;\nconst Slider = styled.input`\n`;\n_c2 = Slider;\n\nconst ChatInput = () => {\n  _s();\n\n  const [inputText, setInputText] = useState('Say something...');\n  const [pitch, setPitch] = useState(1);\n\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      socket.emit('msg', inputText);\n      setInputText('');\n    }\n  };\n\n  useEffect(() => {\n    socket.on('msg', msg => {\n      let utterance = new SpeechSynthesisUtterance(msg);\n      speechSynthesis.speak(utterance);\n      console.log(msg);\n    });\n    return () => {\n      socket.off('msg');\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      autoComplete: \"off\",\n      type: \"text\",\n      name: \"name\",\n      onFocus: () => setInputText(''),\n      onKeyPress: handleKeyPress,\n      onBlur: () => setInputText('Say something...'),\n      value: inputText,\n      onChange: e => setInputText(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Slider, {\n      type: \"range\",\n      min: \"0\",\n      max: \"2\",\n      id: \"myRange\",\n      value: pitch,\n      onChange: e => setPitch(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ChatInput, \"TtqcuROXvRT1CxJRcMLx/7bElX4=\");\n\n_c3 = ChatInput;\nexport default ChatInput;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Input\");\n$RefreshReg$(_c2, \"Slider\");\n$RefreshReg$(_c3, \"ChatInput\");","map":{"version":3,"sources":["C:/Users/grumb/Documents/aloud/client/src/components/ChatInput.jsx"],"names":["React","useState","useEffect","styled","socket","darkGrey","Input","input","Slider","ChatInput","inputText","setInputText","pitch","setPitch","handleKeyPress","e","key","emit","on","msg","utterance","SpeechSynthesisUtterance","speechSynthesis","speak","console","log","off","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,MAAP,MAAmB,WAAnB;;;AAGA,MAAMC,QAAQ,GAAG,SAAjB;AAEA,MAAMC,KAAK,GAAGH,MAAM,CAACI,KAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAaF,QAAS;AACtB,EAZA;KAAMC,K;AAcN,MAAME,MAAM,GAAGL,MAAM,CAACI,KAAM;AAC5B,CADA;MAAMC,M;;AAGN,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,kBAAD,CAA1C;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,CAAD,CAAlC;;AACA,QAAMa,cAAc,GAAIC,CAAD,IAAO;AAC1B,QAAGA,CAAC,CAACC,GAAF,KAAU,OAAb,EAAqB;AACnBZ,MAAAA,MAAM,CAACa,IAAP,CAAY,KAAZ,EAAmBP,SAAnB;AACAC,MAAAA,YAAY,CAAC,EAAD,CAAZ;AACD;AACJ,GALD;;AAOAT,EAAAA,SAAS,CAAC,MAAM;AACZE,IAAAA,MAAM,CAACc,EAAP,CAAU,KAAV,EAAiBC,GAAG,IAAI;AACpB,UAAIC,SAAS,GAAG,IAAIC,wBAAJ,CAA6BF,GAA7B,CAAhB;AACAG,MAAAA,eAAe,CAACC,KAAhB,CAAsBH,SAAtB;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ;AACH,KAJD;AAMA,WAAO,MAAM;AACTf,MAAAA,MAAM,CAACsB,GAAP,CAAW,KAAX;AACH,KAFD;AAGH,GAVQ,CAAT;AAYA,sBACA;AAAA,4BACI,QAAC,KAAD;AAAO,MAAA,YAAY,EAAC,KAApB;AAA0B,MAAA,IAAI,EAAC,MAA/B;AAAsC,MAAA,IAAI,EAAC,MAA3C;AAAkD,MAAA,OAAO,EAAE,MAAMf,YAAY,CAAC,EAAD,CAA7E;AAAmF,MAAA,UAAU,EAAEG,cAA/F;AACA,MAAA,MAAM,EAAE,MAAMH,YAAY,CAAC,kBAAD,CAD1B;AACgD,MAAA,KAAK,EAAED,SADvD;AACkE,MAAA,QAAQ,EAAEK,CAAC,IAAIJ,YAAY,CAACI,CAAC,CAACY,MAAF,CAASC,KAAV;AAD7F;AAAA;AAAA;AAAA;AAAA,YADJ,eAGI,QAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,OAAb;AAAqB,MAAA,GAAG,EAAC,GAAzB;AAA6B,MAAA,GAAG,EAAC,GAAjC;AAAqC,MAAA,EAAE,EAAC,SAAxC;AAAkD,MAAA,KAAK,EAAEhB,KAAzD;AAAgE,MAAA,QAAQ,EAAEG,CAAC,IAAIF,QAAQ,CAACE,CAAC,CAACY,MAAF,CAASC,KAAV;AAAvF;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA,kBADA;AAOH,CA7BD;;GAAMnB,S;;MAAAA,S;AA+BN,eAAeA,SAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport styled from '@emotion/styled';\r\nimport socket from '../socket';\r\n\r\n\r\nconst darkGrey = '#303030';\r\n\r\nconst Input = styled.input`\r\nborder-radius: 5vw;\r\nfont-family: 'Monosten';\r\ncolor: #b7b7b7;\r\nbackground-color: #f2f3f5;\r\nborder: none;\r\nheight: 2vh;\r\nwidth: 50%;\r\npadding: 1em 2em 1em 2em;\r\noutline: none;\r\n&:focus {\r\n    color: ${darkGrey};\r\n}`\r\n\r\nconst Slider = styled.input`\r\n`\r\n\r\nconst ChatInput = () => {\r\n    const [inputText, setInputText] = useState('Say something...');\r\n    const [pitch, setPitch] = useState(1);\r\n    const handleKeyPress = (e) => {\r\n        if(e.key === 'Enter'){\r\n          socket.emit('msg', inputText);\r\n          setInputText('');\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        socket.on('msg', msg => {\r\n            let utterance = new SpeechSynthesisUtterance(msg);\r\n            speechSynthesis.speak(utterance);\r\n            console.log(msg);\r\n        });\r\n\r\n        return () => {\r\n            socket.off('msg');\r\n        };\r\n    });\r\n\r\n    return (\r\n    <>\r\n        <Input autoComplete=\"off\" type=\"text\" name=\"name\" onFocus={() => setInputText('')} onKeyPress={handleKeyPress} \r\n        onBlur={() => setInputText('Say something...')} value={inputText} onChange={e => setInputText(e.target.value)}/>\r\n        <Slider type=\"range\" min=\"0\" max=\"2\" id=\"myRange\" value={pitch} onChange={e => setPitch(e.target.value)}/>\r\n    </> \r\n    )\r\n}\r\n\r\nexport default ChatInput;"]},"metadata":{},"sourceType":"module"}