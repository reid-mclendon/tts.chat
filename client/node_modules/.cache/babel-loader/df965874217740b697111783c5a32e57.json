{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport socket from '../socket';\nlet synth = window.speechSynthesis;\nlet utterance;\nlet voices = speechSynthesis.getVoices();\n\nconst Speaker = () => {\n  _s();\n\n  utterance.voice = voices[8];\n  useEffect(() => {\n    socket.on('msg', data => {\n      // tell the client to speak a message with specified pitch and rate\n      utterance = new SpeechSynthesisUtterance(data.text);\n      synth.speak(utterance);\n      console.log(data.text);\n    });\n    return () => {\n      socket.removeAllListeners();\n    };\n  });\n  return null;\n};\n\n_s(Speaker, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Speaker;\nexport default Speaker;\n\nvar _c;\n\n$RefreshReg$(_c, \"Speaker\");","map":{"version":3,"sources":["C:/Users/grumb/Documents/aloud/client/src/components/Speaker.jsx"],"names":["React","useEffect","socket","synth","window","speechSynthesis","utterance","voices","getVoices","Speaker","voice","on","data","SpeechSynthesisUtterance","text","speak","console","log","removeAllListeners"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,IAAIC,KAAK,GAAGC,MAAM,CAACC,eAAnB;AACA,IAAIC,SAAJ;AACA,IAAIC,MAAM,GAAGF,eAAe,CAACG,SAAhB,EAAb;;AAGA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAClBH,EAAAA,SAAS,CAACI,KAAV,GAAkBH,MAAM,CAAC,CAAD,CAAxB;AAEIN,EAAAA,SAAS,CAAC,MAAM;AACZC,IAAAA,MAAM,CAACS,EAAP,CAAU,KAAV,EAAiBC,IAAI,IAAI;AAAE;AAC3BN,MAAAA,SAAS,GAAG,IAAIO,wBAAJ,CAA6BD,IAAI,CAACE,IAAlC,CAAZ;AACAX,MAAAA,KAAK,CAACY,KAAN,CAAYT,SAAZ;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAYL,IAAI,CAACE,IAAjB;AACH,KAJG;AAMJ,WAAO,MAAM;AACTZ,MAAAA,MAAM,CAACgB,kBAAP;AACH,KAFD;AAGH,GAVY,CAAT;AAYJ,SAAQ,IAAR;AACH,CAhBD;;GAAMT,O;;KAAAA,O;AAkBN,eAAeA,OAAf","sourcesContent":["import React, {useEffect} from 'react';\r\nimport socket from '../socket';\r\nlet synth = window.speechSynthesis;\r\nlet utterance;\r\nlet voices = speechSynthesis.getVoices();\r\n\r\n\r\nconst Speaker = () => {\r\n    utterance.voice = voices[8];\r\n\r\n        useEffect(() => {\r\n            socket.on('msg', data => { // tell the client to speak a message with specified pitch and rate\r\n            utterance = new SpeechSynthesisUtterance(data.text);\r\n            synth.speak(utterance);\r\n            console.log(data.text);\r\n        });\r\n\r\n        return () => {\r\n            socket.removeAllListeners();\r\n        };\r\n    });\r\n\r\n    return (null);\r\n}\r\n\r\nexport default Speaker;"]},"metadata":{},"sourceType":"module"}