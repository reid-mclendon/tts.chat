{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\grumb\\\\Documents\\\\aloud\\\\client\\\\src\\\\components\\\\Chat.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport socket from '../adapters/socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\ndisplay:flex;\njustify-content: center;\nalign-items: center;\nheight: 25vh;\ngrid-row: 2;\n`;\n_c = Wrapper;\nconst StyledInput = styled.input`\nborder-radius: 100em;\nbox-sizing: border-box;\nfont-family: 'Monosten';\ncolor: #b7b7b7;\nbackground-color: #f2f3f5;\nborder: none;\nwidth: 75%;\npadding: 1em 2em 1em 2em;\noutline: none;\ntransition-duration: .3s;\n&:focus {\n    color: #303030;\n}\n&:hover {\n    background-color: #eeeff2;\n}\n\n&:hover:not(:focus) {\n    color: #a5a5a5;\n}\n@media (min-width: 1024px) {\n   width: 50%;\n}\n`;\n_c2 = StyledInput;\n\nconst Chat = () => {\n  _s();\n\n  // Set up variables and initial state\n  const defaultText = 'Enter your name to join';\n  const [user, setUser] = useState({\n    id: '',\n    name: ''\n  });\n  const [inputText, setInputText] = useState(defaultText); // On submit: \n\n  const handleSubmit = e => {\n    e.preventDefault();\n    e.target.blur();\n\n    if (user === {\n      id: '',\n      name: ''\n    }) {\n      // If no user exists, make one using socket.id and input value and send it to the server\n      let newUser = {\n        id: socket.id,\n        name: inputText\n      };\n      setUser(newUser);\n      socket.emit('newUser', user);\n    } else {\n      // If we are a user, send the value of our input to the server and reset our input\n      socket.emit('msg', inputText);\n      setInputText('');\n    }\n  };\n\n  useEffect(() => {\n    socket.on('speak', text => {\n      console.log(text);\n      let utterance = new SpeechSynthesisUtterance(text);\n      let synth = window.speechSynthesis;\n      synth.speak(utterance);\n    });\n    return () => {\n      socket.off('speak');\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Wrapper, {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        style: {\n          width: '100%',\n          display: 'flex',\n          justifyContent: 'center'\n        },\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(StyledInput, {\n          maxLength: \"32\",\n          autoComplete: \"off\",\n          type: \"text\",\n          name: \"name\",\n          onFocus: e => setInputText(''),\n          onBlur: e => {\n            user === {\n              id: '',\n              name: ''\n            } ? setInputText(defaultText) : setInputText('Say something...');\n          },\n          value: inputText,\n          onChange: e => setInputText(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\n_s(Chat, \"2/yr1U3uk+l8csZLofilr2QyFmA=\");\n\n_c3 = Chat;\nexport default Chat;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"StyledInput\");\n$RefreshReg$(_c3, \"Chat\");","map":{"version":3,"sources":["C:/Users/grumb/Documents/aloud/client/src/components/Chat.jsx"],"names":["React","useState","useEffect","styled","socket","Wrapper","div","StyledInput","input","Chat","defaultText","user","setUser","id","name","inputText","setInputText","handleSubmit","e","preventDefault","target","blur","newUser","emit","on","text","console","log","utterance","SpeechSynthesisUtterance","synth","window","speechSynthesis","speak","off","width","display","justifyContent","value"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport styled from '@emotion/styled';\r\nimport socket from '../adapters/socket';\r\n\r\nconst Wrapper = styled.div`\r\ndisplay:flex;\r\njustify-content: center;\r\nalign-items: center;\r\nheight: 25vh;\r\ngrid-row: 2;\r\n`\r\n\r\nconst StyledInput = styled.input`\r\nborder-radius: 100em;\r\nbox-sizing: border-box;\r\nfont-family: 'Monosten';\r\ncolor: #b7b7b7;\r\nbackground-color: #f2f3f5;\r\nborder: none;\r\nwidth: 75%;\r\npadding: 1em 2em 1em 2em;\r\noutline: none;\r\ntransition-duration: .3s;\r\n&:focus {\r\n    color: #303030;\r\n}\r\n&:hover {\r\n    background-color: #eeeff2;\r\n}\r\n\r\n&:hover:not(:focus) {\r\n    color: #a5a5a5;\r\n}\r\n@media (min-width: 1024px) {\r\n   width: 50%;\r\n}\r\n`\r\n\r\nconst Chat = () => {\r\n    // Set up variables and initial state\r\n    const defaultText = 'Enter your name to join';\r\n    const [user, setUser] = useState({id: '', name: ''});\r\n    const [inputText, setInputText] = useState(defaultText);\r\n    \r\n    // On submit: \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        e.target.blur();\r\n        if (user === {id: '', name: ''}) { // If no user exists, make one using socket.id and input value and send it to the server\r\n            let newUser = {id: socket.id, name: inputText};\r\n            setUser(newUser);\r\n            socket.emit('newUser', user);\r\n        }\r\n\r\n        else { // If we are a user, send the value of our input to the server and reset our input\r\n            socket.emit('msg', inputText); \r\n            setInputText('');\r\n        }\r\n        \r\n    }\r\n\r\n    useEffect(() => {\r\n        socket.on('speak', text => {\r\n                console.log(text);\r\n                let utterance = new SpeechSynthesisUtterance(text);\r\n                let synth = window.speechSynthesis;\r\n                synth.speak(utterance);\r\n          });\r\n\r\n          return (() => {\r\n              socket.off('speak');\r\n          })\r\n    });\r\n\r\n\r\n    return (\r\n    <>\r\n    <Wrapper>\r\n    <form style={{ width:'100%', display:'flex', justifyContent:'center' }} onSubmit={handleSubmit}>\r\n        <StyledInput maxLength=\"32\" autoComplete=\"off\"  type=\"text\" name=\"name\" onFocus={(e) => setInputText('')}\r\n         onBlur={(e) => { user === {id: '', name: ''} ? setInputText(defaultText) : setInputText('Say something...'); }}\r\n          value={inputText} onChange={(e) => setInputText(e.target.value)}>\r\n        </StyledInput>\r\n    </form>\r\n    </Wrapper> \r\n    </>\r\n    )\r\n}\r\n\r\nexport default Chat;"]},"metadata":{},"sourceType":"module"}