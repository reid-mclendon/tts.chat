{"version":3,"sources":["adapters/socket.js","components/Chat.jsx","components/Logo.jsx","components/UserCount.jsx","components/User.jsx","components/UserList.jsx","components/Info.jsx","App.js","reportWebVitals.js","index.js"],"names":["socket","io","Wrapper","styled","div","StyledInput","input","Chat","user","defaultText","useState","userName","setName","inputText","setInputText","charLimit","setCharLimit","useEffect","on","text","utterance","SpeechSynthesisUtterance","window","speechSynthesis","speak","off","style","width","display","justifyContent","onSubmit","e","preventDefault","target","blur","id","name","emit","maxLength","autoComplete","type","onFocus","onBlur","value","onChange","StyledSpan","span","Logo","Inner","Dot","UserCount","users","length","UserWrapper","Username","User","borderBottom","paddingBottom","ListWrapper","BoxWrapper","UserList","map","Info","setUsers","enabled","setEnabled","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAGeA,E,MAFAC,K,OCGTC,EAAUC,IAAOC,IAAV,wHAQPC,EAAcF,IAAOG,MAAV,+cAiFFC,EArDF,WAET,IAAIC,EACEC,EAAc,0BAHL,EAIaC,mBAAS,IAJtB,mBAIRC,EAJQ,KAIEC,EAJF,OAKmBF,mBAASD,GAL5B,mBAKRI,EALQ,KAKGC,EALH,OAMmBJ,mBAAS,GAN5B,mBAMRK,EANQ,KAMGC,EANH,KAuCf,OAbAC,qBAAU,WAOJ,OANFjB,EAAOkB,GAAG,SAAS,SAAAC,GACX,IAAIC,EAAY,IAAIC,yBAAyBF,GACjCG,OAAOC,gBACbC,MAAMJ,MAGV,WACJpB,EAAOyB,IAAI,aAMrB,mCACA,cAACvB,EAAD,UACA,sBAAMwB,MAAO,CAAEC,MAAM,OAAQC,QAAQ,OAAQC,eAAe,UAAYC,SAjCnD,SAACC,GAClBA,EAAEC,iBACFD,EAAEE,OAAOC,OACQ,KAAbvB,GACAH,EAAO,CAAC2B,GAAInC,EAAOmC,GAAIC,KAAMvB,GAC7Bb,EAAOqC,KAAK,UAAW7B,GACvBI,EAAQC,GACRG,EAAa,IACbF,EAAa,MAIbd,EAAOqC,KAAK,MAAOxB,GACnBC,EAAa,MAoBrB,SACI,cAACT,EAAD,CAAaiC,UAAWvB,EAAWwB,aAAa,MAAOC,KAAK,OAAOJ,KAAK,OAAOK,QAAS,SAACV,GAAD,OAAOjB,EAAa,KAC3G4B,OAAQ,SAACX,GAA0BjB,EAAL,KAAbH,EAA+BF,EAA4B,qBAC3EkC,MAAO9B,EAAW+B,SAAU,SAACb,GAAD,OAAOjB,EAAaiB,EAAEE,OAAOU,iBClF7DzC,EAAUC,IAAOC,IAAV,0JAQPyC,EAAa1C,IAAO2C,KAAV,8KAiBDC,EAPF,WAET,OACI,cAAC,EAAD,UAAS,cAACF,EAAD,0BCrBX3C,EAAUC,IAAOC,IAAV,2FAKP4C,EAAQ7C,IAAOC,IAAV,qPAgBL6C,EAAM9C,IAAOC,IAAV,0HAeM8C,EAPG,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAEhB,OACI,cAAC,EAAD,UAAS,eAACH,EAAD,WAAO,cAACC,EAAD,IAAOE,EAAMC,OAApB,gBC/BXC,EAAclD,IAAOC,IAAV,oFAMXkD,EAAWnD,IAAOC,IAAV,mIAgBCmD,EARF,SAAA/C,GACT,OACI,cAAC6C,EAAD,UACI,cAACC,EAAD,CAAU5B,MAAOlB,EAAK2B,KAAOnC,EAAOmC,GAAK,CAACqB,aAAc,oBAAqBC,cAAe,OAAS,CAACD,aAAc,OAAQC,cAAe,OAA3I,SAAoJjD,EAAK4B,UCjB/JsB,EAAcvD,IAAOC,IAAV,6EAKXuD,EAAaxD,IAAOC,IAAV,2QA2BDwD,EAXE,SAAC,GAAa,IAAZT,EAAW,EAAXA,MAEf,OACI,cAACO,EAAD,UACA,cAACC,EAAD,UACKR,EAAMU,KAAK,SAAArD,GAAI,OAAI,cAAC,EAAD,CAAoB4B,KAAM5B,EAAK4B,KAAMD,GAAI3B,EAAK2B,IAAnC3B,EAAK2B,YCIjC2B,EA7BF,WAAO,IAAD,EACWpD,mBAAS,IADpB,mBACRyC,EADQ,KACDY,EADC,OAEerD,oBAAS,GAFxB,mBAERsD,EAFQ,KAECC,EAFD,KAgBf,OAZAhD,qBAAU,WAON,OANAjB,EAAOkB,GAAG,cAAc,SAAAiC,GACpBY,EAASZ,GACLa,EACsB,IAAjBb,EAAMC,QAAca,GAAW,GAD3BA,GAAW,MAIrB,WACHjE,EAAOyB,IAAI,kBAKnB,mCACKuC,EACD,qCACA,cAAC,EAAD,CAAWb,MAAOA,IAClB,cAAC,EAAD,CAAUA,MAAOA,OAEf,gCCtBJjD,EAAUC,IAAOC,IAAV,wHAgBE8D,EAVH,WACV,OACE,eAAC,EAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCLSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.73d06c33.chunk.js","sourcesContent":["import io from \"socket.io-client\";\r\nconst socket = io();\r\n\r\nexport default socket;","import React, {useState, useEffect} from 'react';\r\nimport styled from '@emotion/styled';\r\nimport socket from '../adapters/socket';\r\n\r\nconst Wrapper = styled.div`\r\ndisplay:flex;\r\njustify-content: center;\r\nalign-items: center;\r\nheight: 25vh;\r\ngrid-row: 2;\r\n`\r\n\r\nconst StyledInput = styled.input`\r\nborder-radius: 100em;\r\nbox-sizing: border-box;\r\nfont-family: 'Monosten';\r\ncolor: #b7b7b7;\r\nbackground-color: #f2f3f5;\r\nborder: none;\r\nwidth: 75%;\r\npadding: 1em 2em 1em 2em;\r\noutline: none;\r\ntransition-duration: .3s;\r\n&:focus {\r\n    color: #303030;\r\n}\r\n\r\n&:hover:not(:focus) {\r\n    background-color: #eeeff2;\r\n    color: #a5a5a5;\r\n}\r\n@media (min-width: 768px) {\r\n   width: 50%;\r\n}\r\n\r\n@media (min-width: 1024px) {\r\n   width: 33%;\r\n}   \r\n`\r\n\r\nconst Chat = () => {\r\n    // Set defaultText and initial state\r\n    let user;\r\n    const defaultText = 'Enter your name to join';\r\n    const [userName, setName] = useState('');\r\n    const [inputText, setInputText] = useState(defaultText);\r\n    const [charLimit, setCharLimit] = useState(8);\r\n    \r\n    // On submit: \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        e.target.blur();\r\n        if (userName === '') { // If we don't have a userName, \r\n            user = {id: socket.id, name: inputText}\r\n            socket.emit('newUser', user);\r\n            setName(inputText);\r\n            setCharLimit(32);\r\n            setInputText('');\r\n        }\r\n\r\n        else {\r\n            socket.emit('msg', inputText); \r\n            setInputText('');\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        socket.on('speak', text => {\r\n                let utterance = new SpeechSynthesisUtterance(text);\r\n                let synth = window.speechSynthesis;\r\n                synth.speak(utterance);\r\n          });\r\n\r\n          return (() => {\r\n              socket.off('speak');\r\n          })\r\n    });\r\n\r\n\r\n    return (\r\n    <>\r\n    <Wrapper>\r\n    <form style={{ width:'100%', display:'flex', justifyContent:'center' }} onSubmit={handleSubmit}>\r\n        <StyledInput maxLength={charLimit} autoComplete=\"off\"  type=\"text\" name=\"name\" onFocus={(e) => setInputText('')}\r\n         onBlur={(e) => { userName === '' ? setInputText(defaultText) : setInputText('Say something...'); }}\r\n          value={inputText} onChange={(e) => setInputText(e.target.value)}>\r\n        </StyledInput>\r\n    </form>\r\n    </Wrapper> \r\n    </>\r\n    )\r\n}\r\n\r\nexport default Chat;","import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst Wrapper = styled.div`\r\ndisplay:flex;\r\njustify-content: center;\r\nalign-items: flex-end;  \r\ngrid-row: 1;\r\nheight: 25vh;\r\nfont-family: 'Josefin Sans';\r\n`\r\nconst StyledSpan = styled.span`\r\nfont-family: 'Josefin Sans';\r\nfont-size: 10vh;\r\ncolor: #6f6f6f;\r\nfont-weight: 100;\r\ntransition-duration: .3s;\r\n&:hover {\r\n    color: #04d410;\r\n}\r\n`\r\nconst Logo = () => {\r\n\r\n    return (\r\n        <Wrapper><StyledSpan>tts.chat</StyledSpan></Wrapper>\r\n    )\r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst Wrapper = styled.div`\r\ndisplay:flex;\r\njustify-content: center;\r\nalign-items: center;\r\n`\r\nconst Inner = styled.div`\r\ndisplay:flex;\r\nalign-items: center;\r\nwidth: 75%;\r\nfont-family: 'Monosten';\r\nfont-weight: 300;\r\nmargin-bottom: 2em;\r\n@media (min-width: 768px) {\r\n    width: 50%;\r\n}\r\n\r\n@media (min-width: 1024px) {\r\n    width: 33%;\r\n}\r\n`\r\n\r\nconst Dot = styled.div`\r\nwidth: .5em;\r\nheight: .5em;\r\nbackground: #04d410;\r\nborder-radius: 100em;\r\nmargin-right: 1em;\r\n`\r\n\r\nconst UserCount = ({users}) => {\r\n    \r\n    return (\r\n        <Wrapper><Inner><Dot/>{users.length} Online</Inner></Wrapper>\r\n    );\r\n}\r\n\r\nexport default UserCount;\r\n\r\n","import React from 'react'\r\nimport styled from '@emotion/styled';\r\nimport socket from '../adapters/socket';\r\n\r\nconst UserWrapper = styled.div`\r\ndisplay: flex;\r\nflex-wrap: wrap;\r\nflex-direction: row;\r\n`\r\n\r\nconst Username = styled.div`\r\ndisplay:flex;\r\njustify-content: center;\r\nalign-items; center;\r\nwidth: 100%;\r\nfont-family: 'Monosten';\r\n`\r\n\r\nconst User = user => {\r\n    return(\r\n        <UserWrapper>\r\n            <Username style={user.id === socket.id ? {borderBottom: '2px solid #04d410', paddingBottom: '3px'} : {borderBottom: 'none', paddingBottom: '3px'}}>{user.name}</Username>\r\n        </UserWrapper>\r\n    )\r\n}\r\n\r\nexport default User;","import React from 'react';\r\nimport User from './User';\r\nimport styled from '@emotion/styled';\r\n\r\nconst ListWrapper = styled.div`\r\n    display:flex;\r\n    justify-content: center;\r\n`\r\n\r\nconst BoxWrapper = styled.div`\r\n    width: 75%;\r\n    display: flex;\r\n    justify-content: start;\r\n    flex-wrap: wrap;\r\n    grid-gap: 3em;\r\n\r\n    @media (min-width: 768px) {\r\n        width: 50%;\r\n    }\r\n    \r\n    @media (min-width: 1024px) {\r\n        width: 33%;\r\n    }\r\n`\r\n\r\nconst UserList = ({users}) => {\r\n    \r\n    return (\r\n        <ListWrapper>\r\n        <BoxWrapper>\r\n            {users.map( user => <User key={user.id} name={user.name} id={user.id}/> )}\r\n        </BoxWrapper>\r\n        </ListWrapper>\r\n    )\r\n}\r\n\r\nexport default UserList;","import React, {useState, useEffect} from 'react';\r\nimport socket from '../adapters/socket';\r\nimport UserCount from './UserCount';\r\nimport UserList from './UserList';\r\n\r\nconst Info = () => {\r\n    const [users, setUsers] = useState([]);\r\n    const [enabled, setEnabled] = useState(false);\r\n\r\n    useEffect(() => {\r\n        socket.on('userUpdate', users => {\r\n            setUsers(users);\r\n            if(!enabled) setEnabled(true);\r\n            else if (users.length === 0) setEnabled(false);\r\n        })\r\n\r\n        return () => {\r\n            socket.off('userUpdate');\r\n        };\r\n    });\r\n\r\n    return ( \r\n    <>\r\n        {enabled ? // If enabled, render UserCount and UserList, if not render nothing\r\n        <>\r\n        <UserCount users={users}/>\r\n        <UserList users={users}/>\r\n        </>\r\n        : <></>\r\n        }\r\n    </>\r\n    )\r\n}\r\n\r\nexport default Info;","import './App.css';\nimport styled from '@emotion/styled';\nimport Chat from './components/Chat';\nimport Logo from './components/Logo';\nimport Info from './components/Info';\n\nconst Wrapper = styled.div`\ndisplay: grid;\ngrid-template-columns: repeat(1, 1fr);\ngrid-auto-rows: minmax(1vh, auto);\n`\n\nconst App = () => {\n  return (\n    <Wrapper>\n      <Logo />\n      <Chat />\n      <Info />\n    </Wrapper>    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}